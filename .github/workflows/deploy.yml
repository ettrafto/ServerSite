name: Deploy via Cloudflare Access

on:
  workflow_dispatch:
  push:
    branches: [ master ]  # change if you deploy from another branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      HOST: ssh.evantrafton.me
      USER: evantrafton
      APP_DIR: /opt/apps/dashboard

    steps:
      - uses: actions/checkout@v4

      # (Optional) Build your app here if needed.
      # - run: |
      #     npm ci
      #     npm run build

      # Package the repo (excluding big caches)
      - name: Create release tarball
        run: |
          set -euo pipefail
          TAR=release-${GITHUB_SHA}.tgz
          tar -czf "$TAR" \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='node_modules' \
            .
          echo "TAR=$TAR" >> $GITHUB_ENV

      - name: Install cloudflared
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb
          cloudflared --version

      - name: Export Cloudflare Access env
        env:
          CF_ACCESS_CLIENT_ID: ${{ secrets.CF_ACCESS_CLIENT_ID }}
          CF_ACCESS_CLIENT_SECRET: ${{ secrets.CF_ACCESS_CLIENT_SECRET }}
        run: |
          echo "CF_ACCESS_CLIENT_ID=$CF_ACCESS_CLIENT_ID" >> $GITHUB_ENV
          echo "CF_ACCESS_CLIENT_SECRET=$CF_ACCESS_CLIENT_SECRET" >> $GITHUB_ENV

      - name: Start ssh-agent and add key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Upload the tarball through the Access tunnel
      - name: Upload release to server (/tmp)
        run: |
          set -euo pipefail
          scp -o StrictHostKeyChecking=accept-new \
              -o ProxyCommand="cloudflared access ssh --hostname %h" \
              "$TAR" "$USER@$HOST:/tmp/release.tgz"

      # Extract into APP_DIR and (optionally) restart a service if present
      - name: Unpack + (optional) restart
        run: |
          set -euo pipefail
          ssh -o StrictHostKeyChecking=accept-new \
              -o ProxyCommand="cloudflared access ssh --hostname %h" \
              "$USER@$HOST" \
              "
                set -euo pipefail
                mkdir -p '$APP_DIR'
                tar -xzf /tmp/release.tgz -C '$APP_DIR' --strip-components 0
                rm -f /tmp/release.tgz
                echo 'Deployed to $APP_DIR'

                # OPTIONAL: if you manage a systemd unit named \"dashboard\",
                # restart it safely (won't fail the job if not present).
                if command -v systemctl >/dev/null 2>&1 && systemctl list-unit-files | grep -q '^dashboard\.service'; then
                  echo 'Restarting systemd service: dashboard'
                  sudo systemctl restart dashboard || (echo 'Failed to restart dashboard' && exit 1)
                  systemctl --no-pager --full status dashboard || true
                else
                  echo 'No systemd service named \"dashboard\" found; skipping restart.'
                fi
              "
