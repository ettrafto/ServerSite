name: Deploy via Cloudflare Access
on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      HOST: ssh.evantrafton.me
      USER: evantrafton
      APP_DIR: /opt/apps/dashboard

    steps:
      - uses: actions/checkout@v4

      # Install cloudflared client
      - name: Install cloudflared
        run: |
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb
          cloudflared --version

      # Export Access Service Token (must be in repo secrets)
      - name: Export Cloudflare Access env
        env:
          CF_ACCESS_CLIENT_ID: ${{ secrets.CF_ACCESS_CLIENT_ID }}
          CF_ACCESS_CLIENT_SECRET: ${{ secrets.CF_ACCESS_CLIENT_SECRET }}
        run: |
          echo "CF_ACCESS_CLIENT_ID=$CF_ACCESS_CLIENT_ID" >> $GITHUB_ENV
          echo "CF_ACCESS_CLIENT_SECRET=$CF_ACCESS_CLIENT_SECRET" >> $GITHUB_ENV

      # Load SSH private key (matching the public key in ~evantrafton/.ssh/authorized_keys)
      - name: Start ssh-agent and add key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # ✅ Fast fail if Access/SSH isn’t correct
      - name: SSH connectivity smoke
        run: |
          set -euo pipefail
          ssh -o StrictHostKeyChecking=accept-new \
              -o ProxyCommand="cloudflared access ssh --hostname %h" \
              "$USER@$HOST" \
              "whoami && hostname && test -w '$APP_DIR' && echo 'APP_DIR is writable ✅'"

      # ✅ Packaging (Fix A: git archive; use Fix B if you need build artifacts)
      - name: Create release tarball (git archive)
        run: |
          set -euo pipefail
          TAR="release-${GITHUB_SHA}.tgz"
          git archive --format=tar.gz -o "$TAR" HEAD
          echo "TAR=$TAR" >> "$GITHUB_ENV"

      # Upload through Access
      - name: Upload release to server (/tmp)
        run: |
          set -euo pipefail
          scp -o StrictHostKeyChecking=accept-new \
              -o ProxyCommand="cloudflared access ssh --hostname %h" \
              "$TAR" "$USER@$HOST:/tmp/release.tgz"

      # Unpack and (optionally) restart
      - name: Unpack + (optional) restart
        run: |
          set -euo pipefail
          ssh -o StrictHostKeyChecking=accept-new \
              -o ProxyCommand="cloudflared access ssh --hostname %h" \
              "$USER@$HOST" \
              "
